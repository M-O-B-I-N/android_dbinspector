apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.6"
    reportsDirectory.set(file("$buildDir/reports/jacoco"))
}

task jacocoTestReport(type: JacocoReport, dependsOn: [
        ":dbinspector:testDebugUnitTest",
        ":dbinspector:createDebugCoverageReport"
]) {


    group = "Reporting"
    description = "Generate Jacoco coverage reports for both unit and instrumented unit tests"

    reports {
        csv.enabled false
        xml.enabled = true
        html.enabled = true

        xml.setDestination(file("${jacoco.reportsDir}/jacocoTestReport.xml"))
        html.setDestination(file("${jacoco.reportsDir}/html"))
    }

    def includesFilter = [
            '**/*ViewModel*.*',
            '**/*Converter*.*',
            '**/*Mapper*.*',
            '**/*UseCase*.*',
    ]

    def excludesFilter = [
            '**/base/Base*.*',
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/lambda$*.class',
            '**/lambda.class',
            '**/*lambda.class',
            '**/*lambda*.class',
            '**/*$$special$$inlined$inject$*.*',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*$DefaultImpls*.*',
            '**/*_MembersInjector.class', //Dagger2 generated code
            '*/*_MembersInjector*.*', //Dagger2 generated code
            '**/*_*Factory*.*', //Dagger2 generated code
            '*/*Component*.*', //Dagger2 generated code
            '**/*Module*.*' //Dagger2 generated code
    ]

    def sourcesTree = [
            "${project.projectDir}/src/main/kotlin"
    ]

    def debugTree = fileTree(dir: "${project.projectDir}/build/intermediates/javac/debug", excludes: excludesFilter, includes: includesFilter) +
            fileTree(dir: "${project.projectDir}/build/tmp/kotlin-classes/debug", excludes: excludesFilter, includes: includesFilter)

    def executionTree = fileTree(dir: "${project.projectDir}/build", includes: ["jacoco/testDebugUnitTest.exec", "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"]) +
            fileTree(dir: "${project.projectDir}", includes: ["jacoco.exec"])

    getSourceDirectories().setFrom(files(sourcesTree))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(files([executionTree]))

    doLast {
        // destination is defined in reports.html.destination field in this task
        println "Test report written to file://${jacoco.reportsDir}/html/index.html"
    }
}
