import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.TestListener
import org.gradle.api.tasks.testing.TestResult.ResultType

plugins {
    id "com.android.library"
    id "kotlin-android"
    id "com.google.protobuf"
}

android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion buildConfig.buildTools

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode releaseConfig.versionCode
        versionName releaseConfig.version
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
            minifyEnabled false
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.txt"
        }
    }

    resourcePrefix "dbinspector_"

    lintOptions {
        disable 'RtlEnabled', 'VectorPath', 'IconLocation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += [
                '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                '-Xexplicit-api=strict'
        ]
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets.each {
        it.proto.srcDirs += "src/$it.name/proto"
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation libs.kotlin.core
    implementation libs.coroutines.android
    implementation libs.bundles.androidx
    implementation libs.protobuf.javalite
    implementation libs.material
    implementation libs.koin.android
    implementation libs.fuzzy

    testImplementation libs.bundles.test
}

protobuf {
    protoc {
        def protobufArtifact = libs.protobuf.artifact.get()
        artifact = protobufArtifact.getModule().toString() + ":" + protobufArtifact.getVersionConstraint().toString()
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
//    testLogging {
//        events TestLogEvent.FAILED, TestLogEvent.SKIPPED // , TestLogEvent.PASSED
//    }
    def testListener = new TestListener() {

        @Override
        void beforeSuite(TestDescriptor testDescriptor) {

        }

        @Override
        void afterSuite(TestDescriptor testDescriptor, TestResult testResult) {
            if (testDescriptor.getParent() == null) {
                println('\nSTATUS: ' + testResult.resultType + ' -> TOTAL: ' + testResult.testCount + ' PASSED: ' + testResult.successfulTestCount + ' FAILED: ' + testResult.failedTestCount + ' SKIPPED: ' + testResult.skippedTestCount)
            }
        }

        @Override
        void beforeTest(TestDescriptor testDescriptor) {

        }

        @Override
        void afterTest(TestDescriptor testDescriptor, TestResult testResult) {
//            println('\n\nNAME: ' + testDescriptor.name + '\nDISPLAY NAME: ' + testDescriptor.displayName + '\nCLASS NAME: ' + testDescriptor.className + '\nIS COMPOSITE: ' + testDescriptor.isComposite() + '\nPARENT: ' + testDescriptor.parent + '\nRESULT: ' + testResult.resultType)
            if (testResult.resultType == ResultType.FAILURE || testResult.resultType == ResultType.SKIPPED) {
                println('\n\nNAME: ' + testDescriptor.name + '\nDISPLAY NAME: ' + testDescriptor.displayName + '\nCLASS NAME: ' + testDescriptor.className + '\nIS COMPOSITE: ' + testDescriptor.isComposite() + '\nPARENT: ' + testDescriptor.parent + '\nRESULT: ' + testResult.resultType)
            }
        }
    }
    addTestListener(testListener)
    finalizedBy jacocoTestReport
}

apply from: "jacoco.gradle"
apply from: "publish.gradle"
