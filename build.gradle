buildscript {

    apply from: "config.gradle"
    apply from: "maven.gradle"

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath libs.gradle
        classpath libs.kotlin.plugin
        classpath libs.cpd
        classpath libs.detekt.plugin
        classpath libs.ktlint
        classpath libs.dokka
        classpath libs.protobuf.plugin
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    def buildProperties = new Properties()
    file(rootDir.absolutePath + "/build.properties").withInputStream { buildProperties.load(it) }
    if (buildProperties.getProperty("build.debug").toBoolean()) {
        configurations.all {
            resolutionStrategy {
                dependencySubstitution {
                    def library = libs.library.get()
                    def librarynoop = libs.librarynoop.get()
                    substitute module(library.getModule().toString() + ":" + library.getVersionConstraint().toString()) with project(':dbinspector')
                    substitute module(librarynoop.getModule().toString() + ":" + librarynoop.getVersionConstraint().toString()) with project(':dbinspector-no-op')
                }
            }
        }
    }
}

subprojects {
    apply from: "$rootDir/cpd.gradle"
    apply from: "$rootDir/detekt.gradle"
    apply from: "$rootDir/ktlint.gradle"
    apply from: "$rootDir/dokka.gradle"
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["--release", "8"]
}

apply from: "deploy.gradle"

task clean(type: Delete) {
    delete rootProject.buildDir
}

task lintAll(dependsOn: [
        ':dbinspector:lintRelease',
        ':dbinspector-no-op:lintRelease'
]) {
    group = "Verification"
    description = "Run Lint on all modules"
}

task detektAll(dependsOn: [
        ':dbinspector:detekt',
        ':dbinspector-no-op:detekt'
]) {
    group = "Verification"
    description = "Run Detekt on all modules"
}

task ktlintAll(dependsOn: [
        ':dbinspector:ktlintCheck',
        ':dbinspector-no-op:ktlintCheck'
]) {
    group = "Verification"
    description = "Run Ktlint on all modules"
}

task cpdAll(dependsOn: [
        ':dbinspector:cpdCheck',
        ':dbinspector-no-op:cpdCheck'
]) {
    group = "Verification"
    description = "Run CPD on all modules"
}

task runStaticChecks(dependsOn: [
        ':lintAll',
        ':detektAll',
        ':ktlintAll',
        ':cpdAll'
]) {
    group = "Verification"
    description = "Run static checks on all modules"
}
